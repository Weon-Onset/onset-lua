{
    "Client.DoesPakExist": {
        "prefix": "DoesPakExist",
        "body": "DoesPakExist(${1:PakName})$0\r\n",
        "description": "(Client) Function: DoesPakExist(PakName)"
    },
    "Client.LoadPak": {
        "prefix": "LoadPak",
        "body": "LoadPak(${1:PakName}, ${2:RootPath}, ${3:ContentPath})$0\r\n",
        "description": "(Client) Function: LoadPak(PakName,RootPath,ContentPath)"
    },
    "Client.ReplaceObjectModelMesh": {
        "prefix": "ReplaceObjectModelMesh",
        "body": "ReplaceObjectModelMesh(${1:ModelId}, ${2:PathToMesh})$0\r\n",
        "description": "(Client) Function: ReplaceObjectModelMesh(ModelId,PathToMesh)"
    },
    "Client.ReplaceAnimationLibrarySequence": {
        "prefix": "ReplaceAnimationLibrarySequence",
        "body": "ReplaceAnimationLibrarySequence(${1:AnimationId}, ${2:PathToNewAnimation},${3:LoopCount},${4:bLayerBlendSpline})$0\r\n",
        "description": "(Client) Function: ReplaceAnimationLibrarySequence(AnimationId, PathToNewAnimiation,LoopCount,bLayeredBlendSpine)"
    },
    "Client.GetAllFilesInPak": {
        "prefix": "GetAllFilesInPak",
        "body": "GetAllFilesInPak(${1:PakName})$0\r\n",
        "description": "(Client) Function: GetAllFilesInPak(PakName)"
    },
    
    
    "Client.SetStorageValue": {
        "prefix": "SetStorageValue",
        "body": "SetStorageValue(${1:key},${2:value})$0\r\n",
        "description": "(Client) Function: SetStorageValue(key,value)"
    },
    "Client.GetStorageValue": {
        "prefix": "GetGameVersion",
        "body": "GetGameVersion(${1:key})$0\r\n",
        "description": "(Client) Function: GetGameVersion(key)"
    },
    "Client.GetGameVersion": {
        "prefix": "GetGameVersion",
        "body": "GetGameVersion()$0\r\n",
        "description": "(Client) Function: GetGameVersion()"
    },
    "Client.GetGameVersionString": {
        "prefix": "GetGameVersionString",
        "body": "GetGameVersionString()$0\r\n",
        "description": "(Client) Function: GetGameVersionString()"
    },
    "Client.IsGameDevMode": {
        "prefix": "IsGameDevMode",
        "body": "IsGameDevMode()$0\r\n",
        "description": "(Client) Function: IsGameDevMode()"
    },
    "Client.IsPlayerInMainMenu": {
        "prefix": "IsPlayerInMainMenu",
        "body": "IsPlayerInMainMenu()$0\r\n",
        "description": "(Client) Function: IsPlayerInMainMenu()"
    },
    "Client.InvokeDamageFX": {
        "prefix": "InvokeDamageFX",
        "body": "InvokeDamageFX(${1:value})$0\r\n",
        "description": "(Client) Function: InvokeDamageFX(value)"
    },
    "Client.UpdateDiscordActivity": {
        "prefix": "UpdateDiscordActivity",
        "body": "UpdateDiscordActivity(${1:activity})$0\r\n",
        "description": "(Client) Function: UpdateDiscordActivity(activity)"
    },
    "Client.ConnectToServer": {
        "prefix": "ConnectToServer",
        "body": "ConnectToServer(${1:address},${2:port},${3:password (optional)}, ${4: levelMap (optional)})$0\r\n",
        "description": "(Client) Function: ConnectToServer(address, port, password (optional), levelMap (optional))"
    },
    "Client.SetNearClipPlane": {
        "prefix": "SetNearClipPlane",
        "body": "SetNearClipPlane(${1:distance})$0\r\n",
        "description": "(Client) Function: SetNearClipPlane(distance)"
    },
    "Client.CreateSky": {
        "prefix": "CreateSky",
        "body": "CreateSky()$0\r\n",
        "description": "(Client) Function: CreateSky()"
    },
    "Client.GetAllPackages": {
        "prefix": "GetAllPackages",
        "body": "GetAllPackages()$0\r\n",
        "description": "(Client) Function: GetAllPackages()"
    },
    "Client.GetPackageFiles": {
        "prefix": "GetPackageFiles",
        "body": "GetPackageFiles(${1:packageName})$0\r\n",
        "description": "(Client) Function: GetPackageFiles(packageName)"
    },
    "Client.IsServer": {
        "prefix": "IsServer",
        "body": "IsServer()$0\r\n",
        "description": "(Client) Function: IsServer()"
    },
    "Client.IsClient": {
        "prefix": "IsClient",
        "body": "IsClient()$0\r\n",
        "description": "(Client) Function: IsClient()"
    },


    "Client.RGBA": {
        "prefix": "RGBA",
        "body": "RGBA(${1:r}, ${2:g}, ${3:b}, ${4:a})$0\r\n",
        "description": "(Client) Function: RGBA(r,g,b,a)"
    },
    "Client.RGB": {
        "prefix": "RGB",
        "body": "RGB(${1:r}, ${2:g}, ${3:b }, ${4:a (optional)})$0\r\n",
        "description": "(Client) Function: RGB(r,g,b ,a (optional))"
    },
    "Client.HexToRGBA": {
        "prefix": "HexToRGBA",
        "body": "HexToRGBA(${1:HexColor})$0\r\n",
        "description": "(Client) Function: HexToRGBA(HexColor)"
    },


    "Client.LineTrace": {
        "prefix": "LineTrace",
        "body": "LineTrace(${1:sX}, ${2:sY}, ${3:sZ}, ${4:eX}, ${5:eY}, ${6:eZ }, ${7:complex (optional)})$0\r\n",
        "description": "(Client) Function: LineTrace(sX,sY,sZ,eX,eY,eZ ,complex (optional))"
    },
    "Client.createtable_ex": {
        "prefix": "createtable_ex",
        "body": "createtable_ex(${1:metatable})$0\r\n",
        "description": "(Client) Function: createtable_ex(metatable)"
    },
    "Client.GetCameraFoV": {
        "prefix": "GetCameraFoV",
        "body": "GetCameraFoV()$0\r\n",
        "description": "(Client) Function: GetCameraFoV()"
    },
    "Client.SetCameraFoV": {
        "prefix": "SetCameraFoV",
        "body": "SetCameraFoV(${1:fov})$0\r\n",
        "description": "(Client) Function: SetCameraFoV(fov)"
    },
    "Client.Random": {
        "prefix": "Random",
        "body": "Random(${1:Min (optional)}, ${2:Max (optional)})$0\r\n",
        "description": "(Client) Function: Random(Min (optional),Max (optional))"
    },
    "Client.RandomFloat": {
        "prefix": "RandomFloat",
        "body": "RandomFloat(${1:Min (optional)}, ${2:Max (optional)})$0\r\n",
        "description": "(Client) Function: RandomFloat(Min (optional),Max (optional))"
    },
    "Client.Base64Encode": {
        "prefix": "Base64Encode",
        "body": "Base64Encode(${1:text})$0\r\n",
        "description": "(Client) Function: Base64Encode(text)"
    },
    "Client.Base64Decode": {
        "prefix": "Base64Decode",
        "body": "Base64Decode(${1:base64})$0\r\n",
        "description": "(Client) Function: Base64Decode(base64)"
    },
    "Client.GetDistance2D": {
        "prefix": "GetDistance2D",
        "body": "GetDistance2D(${1:x}, ${2:y}, ${3:x2}, ${4:y2})$0\r\n",
        "description": "(Client) Function: GetDistance2D(x,y,x2,y2)"
    },
    "Client.GetDistance3D": {
        "prefix": "GetDistance3D",
        "body": "GetDistance3D(${1:x}, ${2:y}, ${3:z}, ${4:x2}, ${5:y2}, ${6:z2})$0\r\n",
        "description": "(Client) Function: GetDistance3D(x,y,z,x2,y2,z2)"
    },
    "Client.GetDistanceSquared3D": {
        "prefix": "GetDistanceSquared3D",
        "body": "GetDistanceSquared3D(${1:x}, ${2:y}, ${3:z}, ${4:x2}, ${5:y2}, ${6:z2})$0\r\n",
        "description": "(Client) Function: GetDistanceSquared3D(x,y,z,x2,y2,z2)"
    },
    "Client.Lerp": {
        "prefix": "Lerp",
        "body": "Lerp(${1:t}, ${2:a}, ${3:b})$0\r\n",
        "description": "(Client) Function: Lerp(t,a,b)"
    },
    "Client.LerpVector": {
        "prefix": "LerpVector",
        "body": "LerpVector(${1:t}, ${2:aX}, ${3:aY},${4:aZ},${5:bX}, ${6:bY},${7:bZ})$0\r\n",
        "description": "(Client) Function: LerpVector(t, aX, aY, aZ, bX, bY, bZ)"
    },
    "Client.VectorToRotation": {
        "prefix": "VectorToRotation",
        "body": "VectorToRotation(${1:x}, ${2:y}, ${3:z})$0\r\n",
        "description": "(Client) Function: VectorToRotation(x,y,z)"
    },
    "Client.RotationToVector": {
        "prefix": "RotationToVector",
        "body": "RotationToVector(${1:x}, ${2:y}, ${3:z})$0\r\n",
        "description": "(Client) Function: RotationToVector(x,y,z)"
    },
    "Client.NormalizeVector": {
        "prefix": "NormalizeVector",
        "body": "NormalizeVector(${1:x}, ${2:y}, ${3:z})$0\r\n",
        "description": "(Client) Function: NormalizeVector(x,y,z)"
    },
    "Client.IsFloatNearlyZero": {
        "prefix": "IsFloatNearlyZero",
        "body": "IsFloatNearlyZero(${1:Value})$0\r\n",
        "description": "(Client) Function: IsFloatNearlyZero(Value)"
    },
    "Client.RandomUnitVectorInCone": {
        "prefix": "RandomUnitVectorInCone",
        "body": "RandomUnitVectorInCone(${1:x}, ${2:y}, ${3:z}, ${4:HalfAngle})$0\r\n",
        "description": "(Client) Function: RandomUnitVectorInCone(x,y,z,HalfAngle)"
    },
    "Client.RandomUnitVectorInEllipticalCone": {
        "prefix": "RandomUnitVectorInEllipticalCone",
        "body": "RandomUnitVectorInEllipticalCone(${1:x}, ${2:y}, ${3:z}, ${4:MaxYaw}, ${5:MaxPitch})$0\r\n",
        "description": "(Client) Function: RandomUnitVectorInEllipticalCone(x,y,z,MaxYaw,MaxPitch)"
    },
    "Client.UpdateStreamingLevels": {
        "prefix": "UpdateStreamingLevels",
        "body": "UpdateStreamingLevels()$0\r\n",
        "description": "(Client) Function: UpdateStreamingLevels()"
    },


    "Client.GetTickCount": {
        "prefix": "GetTickCount",
        "body": "GetTickCount()$0\r\n",
        "description": "(Client) Function: GetTickCount()"
    },
    "Client.GetTimeSeconds": {
        "prefix": "GetTimeSeconds",
        "body": "GetTimeSeconds()$0\r\n",
        "description": "(Client) Function: GetTimeSeconds()"
    },
    "Client.GetDeltaSeconds": {
        "prefix": "GetDeltaSeconds",
        "body": "GetDeltaSeconds()$0\r\n",
        "description": "(Client) Function: GetDeltaSeconds()"
    },

    "Client.TogglePlayerTag": {
        "prefix": "TogglePlayerTag",
        "body": "TogglePlayerTag(${1:player}, ${2:tagname}, ${3:enable})$0\r\n",
        "description": "(Client) Function: TogglePlayerTag(player, tagname, enable)"
    },
    "Client.SetPlayerVoiceTone": {
        "prefix": "SetPlayerVoiceTone",
        "body": "SetPlayerVoiceTone(${1:player}, ${2:voiceTone})$0\r\n",
        "description": "(Client) Function: SetPlayerVoiceTone(player,voiceTone)"
    },
    "Client.GetPlayerActor": {
        "prefix": "GetPlayerActor",
        "body": "GetPlayerActor(${1:playerid})$0\r\n",
        "description": "(Client) Function: GetPlayerActor(playerid)"
    },
    "Client.GetPlayerSkeletalMeshComponent": {
        "prefix": "GetPlayerSkeletalMeshComponent",
        "body": "GetPlayerSkeletalMeshComponent(${1:player},${2:componentName})$0\r\n",
        "description": "(Client) Function: GetPlayerSkeletalMeshComponent(player,componentName)"
    },
    "Client.GetPlayerId": {
        "prefix": "GetPlayerId",
        "body": "GetPlayerId()$0\r\n",
        "description": "(Client) Function: GetPlayerId()"
    },
    "Client.SetPlayerPropertyValue": {
        "prefix": "SetPlayerPropertyValue",
        "body": "SetPlayerPropertyValue(${2:PropertyName}, ${3:Value}, ${4:bSync (optional)})$0\r\n",
        "description": "(Client) Function: SetPlayerPropertyValue(player,PropertyName,Value,bSync (optional))"
    },
    "Client.GetPlayerPropertyValue": {
        "prefix": "GetPlayerPropertyValue",
        "body": "GetPlayerPropertyValue(${2:PropertyName})$0\r\n",
        "description": "(Client) Function: GetPlayerPropertyValue(player,PropertyName)"
    },
    "Client.SetPlayerRotationRate": {
        "prefix": "SetPlayerRotationRate",
        "body": "SetPlayerRotationRate(${1:RotationRate})$0\r\n",
        "description": "(Client) Function: SetPlayerRotationRate(RotationRate)"
    },
    "Client.GetPlayerRotationRate": {
        "prefix": "GetPlayerRotationRate",
        "body": "GetPlayerRotationRate()$0\r\n",
        "description": "(Client) Function: GetPlayerRotationRate()"
    },
    "Client.SetPlayerJumpZVelocity": {
        "prefix": "SetPlayerJumpZVelocity",
        "body": "SetPlayerJumpZVelocity(${1:JumpZVelocity})$0\r\n",
        "description": "(Client) Function: SetPlayerJumpZVelocity(JumpZVelocity)"
    },
    "Client.GetPlayerJumpZVelocity": {
        "prefix": "GetPlayerJumpZVelocity",
        "body": "GetPlayerJumpZVelocity()$0\r\n",
        "description": "(Client) Function: GetPlayerJumpZVelocity()"
    },
    "Client.GetPlayerWeapon": {
        "prefix": "GetPlayerWeapon",
        "body": "GetPlayerWeapon(${2:weaponslot (optional)})$0\r\n",
        "description": "(Client) Function: GetPlayerWeapon(player,weaponslot (optional))"
    },
    "Client.GetWeaponType": {
        "prefix": "GetWeaponType",
        "body": "GetWeaponType(${1:WeaponModelId})$0\r\n",
        "description": "(Client) Function: GetWeaponType(WeaponModelId)"
    },
    "Client.GetPlayerWeaponMuzzleLocation": {
        "prefix": "GetPlayerWeaponMuzzleLocation",
        "body": "GetPlayerWeaponMuzzleLocation(${1:player (optional)})$0\r\n",
        "description": "(Client) Function: GetPlayerWeaponMuzzleLocation(player (optional))"
    },
    "Client.GetPlayerBoneNames": {
        "prefix": "GetPlayerBoneNames",
        "body": "GetPlayerBoneNames()$0\r\n",
        "description": "(Client) Function: GetPlayerBoneNames()"
    },
    "Client.GetAllPlayersInSphere": {
        "prefix": "GetAllPlayersInSphere",
        "body": "GetAllPlayersInSphere(${1:x}, ${2:y}, ${3:z}, ${4:radius }, ${5:bIncludeSelf (optional)})$0\r\n",
        "description": "(Client) Function: GetAllPlayersInSphere(x,y,z,radius ,bIncludeSelf (optional))"
    },
    "Client.GetAllPlayersInBox": {
        "prefix": "GetAllPlayersInBox",
        "body": "GetAllPlayersInBox(${1:x}, ${2:y}, ${3:z}, ${4:bx}, ${5:by}, ${6:bz }, ${7:bIncludeSelf (optional)})$0\r\n",
        "description": "(Client) Function: GetAllPlayersInBox(x,y,z,bx,by,bz ,bIncludeSelf (optional))"
    },
    "Client.GetTerrainHeight": {
        "prefix": "GetTerrainHeight",
        "body": "GetTerrainHeight(${1:sX}, ${2:sY}, ${3:sZ})$0\r\n",
        "description": "(Client) Function: GetTerrainHeight(sX,sY,sZ)"
    },
    "Client.EnableFirstPersonCamera": {
        "prefix": "EnableFirstPersonCamera",
        "body": "EnableFirstPersonCamera(${1:bEnable})$0\r\n",
        "description": "(Client) Function: EnableFirstPersonCamera(bEnable)"
    },
    "Client.IsFirstPersonCamera": {
        "prefix": "IsFirstPersonCamera",
        "body": "IsFirstPersonCamera()$0\r\n",
        "description": "(Client) Function: IsFirstPersonCamera()"
    },
    "Client.SetControllerOrientedMovement": {
        "prefix": "SetControllerOrientedMovement",
        "body": "SetControllerOrientedMovement(${1:bEnable})$0\r\n",
        "description": "(Client) Function: SetControllerOrientedMovement(bEnable)"
    },
    "Client.IsValidPlayer": {
        "prefix": "IsValidPlayer",
        "body": "IsValidPlayer()$0\r\n",
        "description": "(Client) Function: IsValidPlayer(player)"
    },
    "Client.GetPlayerName": {
        "prefix": "GetPlayerName",
        "body": "GetPlayerName()$0\r\n",
        "description": "(Client) Function: GetPlayerName(player)"
    },
    "Client.GetStreamedPlayers": {
        "prefix": "GetStreamedPlayers",
        "body": "GetStreamedPlayers()$0\r\n",
        "description": "(Client) Function: GetStreamedPlayers()"
    },
    "Client.GetPlayerLocation": {
        "prefix": "GetPlayerLocation",
        "body": "GetPlayerLocation()$0\r\n",
        "description": "(Client) Function: GetPlayerLocation(player)"
    },
    "Client.GetPlayerHeading": {
        "prefix": "GetPlayerHeading",
        "body": "GetPlayerHeading()$0\r\n",
        "description": "(Client) Function: GetPlayerHeading(player)"
    },
    "Client.IsPlayerTalking": {
        "prefix": "IsPlayerTalking",
        "body": "IsPlayerTalking()$0\r\n",
        "description": "(Client) Function: IsPlayerTalking(player)"
    },
    "Client.GetPlayerHealth": {
        "prefix": "GetPlayerHealth",
        "body": "GetPlayerHealth()$0\r\n",
        "description": "(Client) Function: GetPlayerHealth(player)"
    },
    "Client.GetPlayerArmor": {
        "prefix": "GetPlayerArmor",
        "body": "GetPlayerArmor()$0\r\n",
        "description": "(Client) Function: GetPlayerArmor(player)"
    },
    "Client.GetPlayerMovementMode": {
        "prefix": "GetPlayerMovementMode",
        "body": "GetPlayerMovementMode()$0\r\n",
        "description": "(Client) Function: GetPlayerMovementMode(player)"
    },
    "Client.GetPlayerMovementSpeed": {
        "prefix": "GetPlayerMovementSpeed",
        "body": "GetPlayerMovementSpeed()$0\r\n",
        "description": "(Client) Function: GetPlayerMovementSpeed(player)"
    },
    "Client.IsPlayerAiming": {
        "prefix": "IsPlayerAiming",
        "body": "IsPlayerAiming()$0\r\n",
        "description": "(Client) Function: IsPlayerAiming(player)"
    },
    "Client.IsPlayerReloading": {
        "prefix": "IsPlayerReloading",
        "body": "IsPlayerReloading()$0\r\n",
        "description": "(Client) Function: IsPlayerReloading(player)"
    },
    "Client.IsPlayerDead": {
        "prefix": "IsPlayerDead",
        "body": "IsPlayerDead()$0\r\n",
        "description": "(Client) Function: IsPlayerDead(player)"
    },
    "Client.GetPlayerBoneLocation": {
        "prefix": "GetPlayerBoneLocation",
        "body": "GetPlayerBoneLocation(${2:BoneName }, ${3:World Space, 2 = Local Space (optional)})$0\r\n",
        "description": "(Client) Function: GetPlayerBoneLocation(player,BoneName ,World Space, 2 = Local Space (optional))"
    },
    "Client.SetPlayerOutline": {
        "prefix": "SetPlayerOutline",
        "body": "SetPlayerOutline(${1:player }, ${2:bEnable (optional)})$0\r\n",
        "description": "(Client) Function: SetPlayerOutline(player, bEnable (optional))"
    },
    "Client.SetPlayerClothingPreset": {
        "prefix": "SetPlayerClothingPreset",
        "body": "SetPlayerClothingPreset(${1:player}, {2:clothing_preset})$0\r\n",
        "description": "(Client) Function: SetPlayerClothingPreset(player, clothing_preset)"
    },
    "Client.GetPlayerVehicle": {
        "prefix": "GetPlayerVehicle",
        "body": "GetPlayerVehicle()$0\r\n",
        "description": "(Client) Function: GetPlayerVehicle()"
    },
    "Client.IsPlayerInVehicle": {
        "prefix": "IsPlayerInVehicle",
        "body": "IsPlayerInVehicle(${1:player (optional)})$0\r\n",
        "description": "(Client) Function: IsPlayerInVehicle(player (optional))"
    },
    "Client.GetPlayerVehicleSeat": {
        "prefix": "GetPlayerVehicleSeat",
        "body": "GetPlayerVehicleSeat()$0\r\n",
        "description": "(Client) Function: GetPlayerVehicleSeat()"
    },
    "Client.GetPlayerEquippedWeaponSlot": {
        "prefix": "GetPlayerEquippedWeaponSlot",
        "body": "GetPlayerEquippedWeaponSlot()$0\r\n",
        "description": "(Client) Function: GetPlayerEquippedWeaponSlot(player)"
    },
    "Client.GetPlayerForwardVector": {
        "prefix": "GetPlayerForwardVector",
        "body": "GetPlayerForwardVector()$0\r\n",
        "description": "(Client) Function: GetPlayerForwardVector(player)"
    },
    "Client.GetPlayerRightVector": {
        "prefix": "GetPlayerRightVector",
        "body": "GetPlayerRightVector()$0\r\n",
        "description": "(Client) Function: GetPlayerRightVector(player)"
    },
    "Client.GetPlayerUpVector": {
        "prefix": "GetPlayerUpVector",
        "body": "GetPlayerUpVector()$0\r\n",
        "description": "(Client) Function: GetPlayerUpVector(player)"
    },
    "Client.GetVehicleActor": {
        "prefix": "GetVehicleActor",
        "body": "GetVehicleActor(${1:vehicleid})$0\r\n",
        "description": "(Client) Function: GetVehicleActor(vehicleid)"
    },
    "Client.SetPlayerLipMovement": {
        "prefix": "SetPlayerLipMovement",
        "body": "SetPlayerLipMovement()$0\r\n",
        "description": "(Client) Function: SetPlayerLipMovement(player)"
    },
    "Client.IsPlayerPlayingAnimation": {
        "prefix": "IsPlayerPlayingAnimation",
        "body": "IsPlayerPlayingAnimation()$0\r\n",
        "description": "(Client) Function: IsPlayerPlayingAnimation(player)"
    },
    "Client.GetPlayerCount": {
        "prefix": "GetPlayerCount",
        "body": "GetPlayerCount()$0\r\n",
        "description": "(Client) Function: GetPlayerCount()"
    },
    "Client.CancelAimImmediately": {
        "prefix": "CancelAimImmediately",
        "body": "CancelAimImmediately()$0\r\n",
        "description": "(Client) Function: CancelAimImmediately()"
    },


    "Client.StartCameraFade": {
        "prefix": "StartCameraFade",
        "body": "StartCameraFade(${1:FromAlpha}, ${2:ToAlpha}, ${3:Duration }, ${4:HexColor (optional)})$0\r\n",
        "description": "(Client) Function: StartCameraFade(FromAlpha,ToAlpha,Duration ,HexColor (optional))"
    },
    "Client.StopCameraFade": {
        "prefix": "StopCameraFade",
        "body": "StopCameraFade()$0\r\n",
        "description": "(Client) Function: StopCameraFade()"
    },
    "Client.PlayCameraShake": {
        "prefix": "PlayCameraShake",
        "body": "PlayCameraShake(${1:Duration }, ${2:BlendInTime}, ${3:BlendOutTime}, ${4:Scale (optional)})$0\r\n",
        "description": "(Client) Function: PlayCameraShake(Duration ,BlendInTime,BlendOutTime,Scale (optional))"
    },
    "Client.StopCameraShake": {
        "prefix": "StopCameraShake",
        "body": "StopCameraShake(${1:bImmediate (optional)})$0\r\n",
        "description": "(Client) Function: StopCameraShake(bImmediate (optional))"
    },
    "Client.SetCameraShakeLocation": {
        "prefix": "SetCameraShakeLocation",
        "body": "SetCameraShakeLocation(${1:XAmp}, ${2:XFreq}, ${3:YAmp}, ${4:YFreq}, ${5:ZAmp}, ${6:ZFreq})$0\r\n",
        "description": "(Client) Function: SetCameraShakeLocation(XAmp,XFreq,YAmp,YFreq,ZAmp,ZFreq)"
    },
    "Client.SetCameraShakeRotation": {
        "prefix": "SetCameraShakeRotation",
        "body": "SetCameraShakeRotation(${1:PitchAmp}, ${2:PitchFreq}, ${3:YawAmp}, ${4:YawFreq}, ${5:RollAmp}, ${6:RollFreq})$0\r\n",
        "description": "(Client) Function: SetCameraShakeRotation(PitchAmp,PitchFreq,YawAmp,YawFreq,RollAmp,RollFreq)"
    },
    "Client.SetCameraShakeFOV": {
        "prefix": "SetCameraShakeFOV",
        "body": "SetCameraShakeFOV(${1:FOVAmp}, ${2:FOVFreq})$0\r\n",
        "description": "(Client) Function: SetCameraShakeFOV(FOVAmp,FOVFreq)"
    },
    "Client.GetScreenSize": {
        "prefix": "GetScreenSize",
        "body": "GetScreenSize()$0\r\n",
        "description": "(Client) Function: GetScreenSize()"
    },
    "Client.SetCameraLocation": {
        "prefix": "SetCameraLocation",
        "body": "SetCameraLocation(${1:x}, ${2:y}, ${3:z}, ${4:bWorldSpace (optional)})$0\r\n",
        "description": "(Client) Function: SetCameraLocation(x,y,z,bWorldSpace (optional))"
    },
    "Client.GetCameraLocation": {
        "prefix": "GetCameraLocation",
        "body": "GetCameraLocation(${1:bSpectateCamera (optional)})$0\r\n",
        "description": "(Client) Function: GetCameraLocation(bSpectateCamera (optional))"
    },
    "Client.SetCameraRotation": {
        "prefix": "SetCameraRotation",
        "body": "SetCameraRotation(${1:pitch}, ${2:yaw}, ${3:roll }, ${4:bWorldSpace (optional)})$0\r\n",
        "description": "(Client) Function: SetCameraRotation(pitch,yaw,roll ,bWorldSpace (optional))"
    },
    "Client.GetCameraRotation": {
        "prefix": "GetCameraRotation",
        "body": "GetCameraRotation(${1:bSpectateCamera (optional)})$0\r\n",
        "description": "(Client) Function: GetCameraRotation(bSpectateCamera (optional))"
    },
    "Client.GetCameraForwardVector": {
        "prefix": "GetCameraForwardVector",
        "body": "GetCameraForwardVector()$0\r\n",
        "description": "(Client) Function: GetCameraForwardVector()"
    },
    "Client.GetCameraRightVector": {
        "prefix": "GetCameraRightVector",
        "body": "GetCameraRightVector()$0\r\n",
        "description": "(Client) Function: GetCameraRightVector()"
    },
    "Client.GetCameraUpVector": {
        "prefix": "GetCameraUpVector",
        "body": "GetCameraUpVector()$0\r\n",
        "description": "(Client) Function: GetCameraUpVector()"
    },
    "Client.SetCameraViewDistance": {
        "prefix": "SetCameraViewDistance",
        "body": "SetCameraViewDistance(${1:distance})$0\r\n",
        "description": "(Client) Function: SetCameraViewDistance(distance)"
    },
    "Client.GetCameraViewDistance": {
        "prefix": "GetCameraViewDistance",
        "body": "GetCameraViewDistance()$0\r\n",
        "description": "(Client) Function: GetCameraViewDistance()"
    },


    "Client.CreateWaypoint": {
        "prefix": "CreateWaypoint",
        "body": "CreateWaypoint(${1:x}, ${2:y}, ${3:z}, ${4:text})$0\r\n",
        "description": "(Client) Function: CreateWaypoint(x,y,z,text)"
    },
    "Client.DestroyWaypoint": {
        "prefix": "DestroyWaypoint",
        "body": "DestroyWaypoint(${1:waypointId})$0\r\n",
        "description": "(Client) Function: DestroyWaypoint(waypointId)"
    },
    "Client.SetWaypointText": {
        "prefix": "SetWaypointText",
        "body": "SetWaypointText(${1:waypointId}, ${2:text})$0\r\n",
        "description": "(Client) Function: SetWaypointText(waypointId,text)"
    },
    "Client.SetWaypointLocation": {
        "prefix": "SetWaypointLocation",
        "body": "SetWaypointLocation(${1:waypointId}, ${2:x}, ${3:y}, ${4:z})$0\r\n",
        "description": "(Client) Function: SetWaypointLocation(waypointId,x,y,z)"
    },
    "Client.GetWaypointLocation": {
        "prefix": "GetWaypointLocation",
        "body": "GetWaypointLocation()$0\r\n",
        "description": "(Client) Function: GetWaypointLocation()"
    },
    "Client.GetAllWaypoints": {
        "prefix": "GetAllWaypoints",
        "body": "GetAllWaypoints()$0\r\n",
        "description": "(Client) Function: GetAllWaypoints()"
    },


    "Client.CreateFireworks": {
        "prefix": "CreateFireworks",
        "body": "CreateFireworks(${1:modelid}, ${2:x}, ${3:y}, ${4:z}, ${5:rx}, ${6:ry}, ${7:rz})$0\r\n",
        "description": "(Client) Function: CreateFireworks(modelid,x,y,z,rx,ry,rz)"
    },


    "Client.GetPackageName": {
        "prefix": "GetPackageName",
        "body": "GetPackageName()$0\r\n",
        "description": "(Client) Function: GetPackageName()"
    },
    "Client.ImportPackage": {
        "prefix": "ImportPackage",
        "body": "ImportPackage(${1:PackageName})$0\r\n",
        "description": "(Client) Function: ImportPackage(PackageName)"
    },
    "Client.AddFunctionExport": {
        "prefix": "AddFunctionExport",
        "body": "AddFunctionExport(${1:ExportName}, ${2:ExportFunction})$0\r\n",
        "description": "(Client) Function: AddFunctionExport(ExportName,ExportFunction)"
    },


    "Client.AddPlayerChat": {
        "prefix": "AddPlayerChat",
        "body": "AddPlayerChat(${2:message})$0\r\n",
        "description": "(Client) Function: AddPlayerChat(player,message)"
    },
    "Client.IsChatFocus": {
        "prefix": "IsChatFocus",
        "body": "IsChatFocus()$0\r\n",
        "description": "(Client) Function: IsChatFocus()"
    },
    "Client.ShowChat": {
        "prefix": "ShowChat",
        "body": "ShowChat(${1:show})$0\r\n",
        "description": "(Client) Function: ShowChat(show)"
    },
    "Client.SetChatLocation": {
        "prefix": "SetChatLocation",
        "body": "SetChatLocation(${1:x}, ${2:y})$0\r\n",
        "description": "(Client) Function: SetChatLocation(x,y)"
    },
    "Client.GetChatLocation": {
        "prefix": "GetChatLocation",
        "body": "GetChatLocation()$0\r\n",
        "description": "(Client) Function: GetChatLocation()"
    },


    "Client.ShowWeaponHUD": {
        "prefix": "ShowWeaponHUD",
        "body": "ShowWeaponHUD(${1:bShow})$0\r\n",
        "description": "(Client) Function: ShowWeaponHUD(bShow)"
    },
    "Client.ShowHealthHUD": {
        "prefix": "ShowHealthHUD",
        "body": "ShowHealthHUD(${1:show})$0\r\n",
        "description": "(Client) Function: ShowHealthHUD(show)"
    },
    "Client.NotifyCrosshairHit": {
        "prefix": "NotifyCrosshairHit",
        "body": "NotifyCrosshairHit()$0\r\n",
        "description": "(Client) Function: NotifyCrosshairHit()"
    },


    "Client.SetPostEffect": {
        "prefix": "SetPostEffect",
        "body": "SetPostEffect(${1:CategoryName}, ${2:SettingName}, ${3:Value})$0\r\n",
        "description": "(Client) Function: SetPostEffect(CategoryName,SettingName,Value)"
    },
    "Client.AddPostProcessMaterial": {
        "prefix": "AddPostProcessMaterial",
        "body": "AddPostProcessMaterial(${1:SlotName}, ${2:UMaterialInterface})$0\r\n",
        "description": "(Client) Function: AddPostProcessMaterial(SlotName,UMaterialInterface)"
    },
    "Client.RemovePostProcessMaterial": {
        "prefix": "RemovePostProcessMaterial",
        "body": "RemovePostProcessMaterial(${1:SlotName})$0\r\n",
        "description": "(Client) Function: RemovePostProcessMaterial(SlotName)"
    },


    "Client.DrawText": {
        "prefix": "DrawText",
        "body": "DrawText(${1:x}, ${2:y}, ${3:text})$0\r\n",
        "description": "(Client) Function: DrawText(x,y,text)"
    },
    "Client.SetDrawColor": {
        "prefix": "SetDrawColor",
        "body": "SetDrawColor(${1:HexColor})$0\r\n",
        "description": "(Client) Function: SetDrawColor(HexColor)"
    },
    "Client.SetTextDrawScale": {
        "prefix": "SetTextDrawScale",
        "body": "SetTextDrawScale(${1:sx}, ${2:sy})$0\r\n",
        "description": "(Client) Function: SetTextDrawScale(sx,sy)"
    },
    "Client.GetTextSize": {
        "prefix": "GetTextSize",
        "body": "GetTextSize(${1:text }, ${2:Scale (optional)})$0\r\n",
        "description": "(Client) Function: GetTextSize(text ,Scale (optional))"
    },
    "Client.DrawLine": {
        "prefix": "DrawLine",
        "body": "DrawLine(${1:sX}, ${2:sY}, ${3:eX}, ${4:eY }, ${5:thickness (optional)})$0\r\n",
        "description": "(Client) Function: DrawLine(sX,sY,eX,eY ,thickness (optional))"
    },
    "Client.DrawLine3D": {
        "prefix": "DrawLine3D",
        "body": "DrawLine3D(${1:sX}, ${2:sY}, ${3:sZ}, ${4:eX}, ${5:eY}, ${6:eZ }, ${7:thickness (optional)})$0\r\n",
        "description": "(Client) Function: DrawLine3D(sX,sY,sZ,eX,eY,eZ ,thickness (optional))"
    },
    "Client.DrawPoint3D": {
        "prefix": "DrawPoint3D",
        "body": "DrawPoint3D(${1:x}, ${2:y}, ${3:z}, ${4:PointSize (optional)}, ${5:bForeground (optional)})$0\r\n",
        "description": "(Client) Function: DrawPoint3D(x,y,z,PointSize (optional),bForeground (optional))"
    },
    "Client.DrawCircle3D": {
        "prefix": "DrawCircle3D",
        "body": "DrawCircle3D(${1:x}, ${2:y}, ${3:z}, ${4:XAxisX}, ${5:XAxisY}, ${6:XAxisZ}, ${7:YAxisX}, ${8:YAxisY}, ${9:YAxisZ}, ${10:Radius (optional)})$0\r\n",
        "description": "(Client) Function: DrawCircle3D(x,y,z,XAxisX,XAxisY,XAxisZ,YAxisX,YAxisY,YAxisZ,Radius (optional))"
    },
    "Client.DrawBox": {
        "prefix": "DrawBox",
        "body": "DrawBox(${1:sX}, ${2:sY}, ${3:sW}, ${4:sH }, ${5:thickness (optional)})$0\r\n",
        "description": "(Client) Function: DrawBox(sX,sY,sW,sH ,thickness (optional))"
    },
    "Client.DrawRect": {
        "prefix": "DrawRect",
        "body": "DrawRect(${1:sX}, ${2:sY}, ${3:sW}, ${4:sH })$0\r\n",
        "description": "(Client) Function: DrawRect(sX,sY,sW,sH )"
    },
    "Client.DrawTexture": {
        "prefix": "DrawTexture",
        "body": "DrawTexture(${1:TextureReference})$0\r\n",
        "description": "(Client) Function: DrawTexture(TextureReference)"
    },
    "Client.DrawTextureEx": {
        "prefix": "DrawTextureEx",
        "body": "DrawTextureEx()$0\r\n",
        "description": "(Client) Function: DrawTextureEx()"
    },
    "Client.WorldToScreen": {
        "prefix": "WorldToScreen",
        "body": "WorldToScreen(${1:x}, ${2:y}, ${3:z})$0\r\n",
        "description": "(Client) Function: WorldToScreen(x,y,z)"
    },
    "Client.ScreenToWorld": {
        "prefix": "ScreenToWorld",
        "body": "ScreenToWorld(${1:x}, ${2:y})$0\r\n",
        "description": "(Client) Function: ScreenToWorld(x,y)"
    },
    "Client.CreateTextBox": {
        "prefix": "CreateTextBox",
        "body": "CreateTextBox(${1:x}, ${2:y}, ${3:text}, ${4:justification})$0\r\n",
        "description": "(Client) Function: CreateTextBox(x,y,text,justification)"
    },
    "Client.DestroyTextBox": {
        "prefix": "DestroyTextBox",
        "body": "DestroyTextBox(${1:textid})$0\r\n",
        "description": "(Client) Function: DestroyTextBox(textid)"
    },
    "Client.SetTextBoxAnchors": {
        "prefix": "SetTextBoxAnchors",
        "body": "SetTextBoxAnchors(${1:textid}, ${2:MinX}, ${3:MinY}, ${4:MaxX}, ${5:MaxY})$0\r\n",
        "description": "(Client) Function: SetTextBoxAnchors(textid,MinX,MinY,MaxX,MaxY)"
    },
    "Client.SetTextBoxAlignment": {
        "prefix": "SetTextBoxAlignment",
        "body": "SetTextBoxAlignment(${1:textid}, ${2:x}, ${3:y})$0\r\n",
        "description": "(Client) Function: SetTextBoxAlignment(textid,x,y)"
    },
    "Client.SetTextBoxText": {
        "prefix": "SetTextBoxText",
        "body": "SetTextBoxText(${1:textid}, ${2:text})$0\r\n",
        "description": "(Client) Function: SetTextBoxText(textid,text)"
    },


    "Client.SetOceanWaterLevel": {
        "prefix": "SetOceanWaterLevel",
        "body": "SetOceanWaterLevel(${1:Level}, ${2:bIncludeSwimmingVolume (optional)})$0\r\n",
        "description": "(Client) Function: SetOceanWaterLevel(Level,bIncludeSwimmingVolume (optional))"
    },
    "Client.SetOceanColor": {
        "prefix": "SetOceanColor",
        "body": "SetOceanColor(${1:WaveScatteringColor}, ${2:WaveScatteringFade}, ${3:ScatteringColor}, ${4:WetColor}, ${5:FogColor})$0\r\n",
        "description": "(Client) Function: SetOceanColor(WaveScatteringColor,WaveScatteringFade,ScatteringColor,WetColor,FogColor)"
    },
    "Client.ResetOceanColor": {
        "prefix": "ResetOceanColor",
        "body": "ResetOceanColor()$0\r\n",
        "description": "(Client) Function: ResetOceanColor()"
    },


    "Client.ShowMouseCursor": {
        "prefix": "ShowMouseCursor",
        "body": "ShowMouseCursor(${1:bShow})$0\r\n",
        "description": "(Client) Function: ShowMouseCursor(bShow)"
    },
    "Client.GetMouseHitLocation": {
        "prefix": "GetMouseHitLocation",
        "body": "GetMouseHitLocation()$0\r\n",
        "description": "(Client) Function: GetMouseHitLocation()"
    },
    "Client.GetMouseHitEntity": {
        "prefix": "GetMouseHitEntity",
        "body": "GetMouseHitEntity()$0\r\n",
        "description": "(Client) Function: GetMouseHitEntity()"
    },
    "Client.IsMouseCursorEnabled": {
        "prefix": "IsMouseCursorEnabled",
        "body": "IsMouseCursorEnabled()$0\r\n",
        "description": "(Client) Function: IsMouseCursorEnabled()"
    },
    "Client.SetMouseLocation": {
        "prefix": "SetMouseLocation",
        "body": "SetMouseLocation(${1:mouseX}, ${2:mouseY})$0\r\n",
        "description": "(Client) Function: SetMouseLocation(mouseX,mouseY)"
    },
    "Client.GetMouseLocation": {
        "prefix": "GetMouseLocation",
        "body": "GetMouseLocation()$0\r\n",
        "description": "(Client) Function: GetMouseLocation()"
    },    
    "Client.GetMouseInputDelta": {
        "prefix": "GetMouseInputDelta",
        "body": "GetMouseInputDelta()$0\r\n",
        "description": "(Client) Function: GetMouseInputDelta()"
    },
    "Client.DeprojectMouseLocationToWorld": {
        "prefix": "DeprojectMouseLocationToWorld",
        "body": "DeprojectMouseLocationToWorld()$0\r\n",
        "description": "(Client) Function: DeprojectMouseLocationToWorld()"
    },


    "Client.SetTime": {
        "prefix": "SetTime",
        "body": "SetTime(${1:time})$0\r\n",
        "description": "(Client) Function: SetTime(time)"
    },
    "Client.GetTime": {
        "prefix": "GetTime",
        "body": "GetTime()$0\r\n",
        "description": "(Client) Function: GetTime()"
    },
    "Client.SetSkySaturation": {
        "prefix": "SetSkySaturation",
        "body": "SetSkySaturation(${1:saturation})$0\r\n",
        "description": "(Client) Function: SetSkySaturation(saturation)"
    },
    "Client.GetSkySaturation": {
        "prefix": "GetSkySaturation",
        "body": "GetSkySaturation()$0\r\n",
        "description": "(Client) Function: GetSkySaturation()"
    },
    "Client.SetCloudSpeed": {
        "prefix": "SetCloudSpeed",
        "body": "SetCloudSpeed(${1:speed})$0\r\n",
        "description": "(Client) Function: SetCloudSpeed(speed)"
    },
    "Client.GetCloudSpeed": {
        "prefix": "GetCloudSpeed",
        "body": "GetCloudSpeed()$0\r\n",
        "description": "(Client) Function: GetCloudSpeed()"
    },
    "Client.SetCloudDensity": {
        "prefix": "SetCloudDensity",
        "body": "SetCloudDensity(${1:density})$0\r\n",
        "description": "(Client) Function: SetCloudDensity(density)"
    },
    "Client.GetCloudDensity": {
        "prefix": "GetCloudDensity",
        "body": "GetCloudDensity()$0\r\n",
        "description": "(Client) Function: GetCloudDensity()"
    },
    "Client.SetSunRadius": {
        "prefix": "SetSunRadius",
        "body": "SetSunRadius(${1:radius})$0\r\n",
        "description": "(Client) Function: SetSunRadius(radius)"
    },
    "Client.GetSunRadius": {
        "prefix": "GetSunRadius",
        "body": "GetSunRadius()$0\r\n",
        "description": "(Client) Function: GetSunRadius()"
    },
    "Client.SetMoonRadius": {
        "prefix": "SetMoonRadius",
        "body": "SetMoonRadius(${1:radius})$0\r\n",
        "description": "(Client) Function: SetMoonRadius(radius)"
    },
    "Client.GetMoonRadius": {
        "prefix": "GetMoonRadius",
        "body": "GetMoonRadius(${1:radius})$0\r\n",
        "description": "(Client) Function: GetMoonRadius(radius)"
    },
    "Client.SetHeightFogDensity": {
        "prefix": "SetHeightFogDensity",
        "body": "SetHeightFogDensity(${1:density})$0\r\n",
        "description": "(Client) Function: SetHeightFogDensity(density)"
    },
    "Client.GetHeightFogDensity": {
        "prefix": "GetHeightFogDensity",
        "body": "GetHeightFogDensity()$0\r\n",
        "description": "(Client) Function: GetHeightFogDensity()"
    },


    "Client.GetPing": {
        "prefix": "GetPing",
        "body": "GetPing()$0\r\n",
        "description": "(Client) Function: GetPing()"
    },
    "Client.GetNetworkStats": {
        "prefix": "GetNetworkStats",
        "body": "GetNetworkStats()$0\r\n",
        "description": "(Client) Function: GetNetworkStats()"
    },
    "Client.GetServerIP": {
        "prefix": "GetServerIP",
        "body": "GetServerIP()$0\r\n",
        "description": "(Client) Function: GetServerIP()"
    },
    "Client.GetServerPort": {
        "prefix": "GetServerPort",
        "body": "GetServerPort()$0\r\n",
        "description": "(Client) Function: GetServerPort()"
    },


    "Client.GetNPCActor": {
        "prefix": "GetNPCActor",
        "body": "GetNPCActor(${1:npcid})$0\r\n",
        "description": "(Client) Function: GetNPCActor(npcid)"
    },
    "Client.SetNPCPropertyValue": {
        "prefix": "SetNPCPropertyValue",
        "body": "SetNPCPropertyValue(${1:npc}, ${2:PropertyName}, ${3:Value}, ${4:bSync (optional)})$0\r\n",
        "description": "(Client) Function: SetNPCPropertyValue(npc,PropertyName,Value,bSync (optional))"
    },
    "Client.GetNPCPropertyValue": {
        "prefix": "GetNPCPropertyValue",
        "body": "GetNPCPropertyValue(${1:npc}, ${2:PropertyName})$0\r\n",
        "description": "(Client) Function: GetNPCPropertyValue(npc,PropertyName)"
    },
    "Client.GetNPCBoneNames": {
        "prefix": "GetNPCBoneNames",
        "body": "GetNPCBoneNames()$0\r\n",
        "description": "(Client) Function: GetNPCBoneNames()"
    },
    "Client.GetNPCBoneLocation": {
        "prefix": "GetNPCBoneLocation",
        "body": "GetNPCBoneLocation(${1:npc}, ${2:BoneName }, ${3:BoneSpace (optional)})$0\r\n",
        "description": "(Client) Function: GetNPCBoneLocation(npc,BoneName ,BoneSpace (optional))"
    },
    "Client.GetNPCCount": {
        "prefix": "GetNPCCount",
        "body": "GetNPCCount()$0\r\n",
        "description": "(Client) Function: GetNPCCount()"
    },
    "Client.GetStreamedNPC": {
        "prefix": "GetStreamedNPC",
        "body": "GetStreamedNPC()$0\r\n",
        "description": "(Client) Function: GetStreamedNPC()"
    },
    "Client.GetNPCLocation": {
        "prefix": "GetNPCLocation",
        "body": "GetNPCLocation(${1:npc})$0\r\n",
        "description": "(Client) Function: GetNPCLocation(npc)"
    },
    "Client.GetNPCSkeletalMeshComponent": {
        "prefix": "GetNPCSkeletalMeshComponent",
        "body": "GetNPCSkeletalMeshComponent(${1:npc}, ${2:ComponentName})$0\r\n",
        "description": "(Client) Function: GetNPCSkeletalMeshComponent(npc,ComponentName)"
    },
    "Client.SetNPCOutline": {
        "prefix": "SetNPCOutline",
        "body": "SetNPCOutline(${1:npc }, ${2:bEnable (optional)})$0\r\n",
        "description": "(Client) Function: SetNPCOutline(npc ,bEnable (optional))"
    },


    "Client.GetObjectActor": {
        "prefix": "GetObjectActor",
        "body": "GetObjectActor(${1:object})$0\r\n",
        "description": "(Client) Function: GetObjectActor(object)"
    },
    "Client.SetObjectPropertyValue": {
        "prefix": "SetObjectPropertyValue",
        "body": "SetObjectPropertyValue(${1:object}, ${2:PropertyName}, ${3:Value}, ${4:bSync (optional)})$0\r\n",
        "description": "(Client) Function: SetObjectPropertyValue(object,PropertyName,Value,bSync (optional))"
    },
    "Client.GetObjectPropertyValue": {
        "prefix": "GetObjectPropertyValue",
        "body": "GetObjectPropertyValue(${1:object}, ${2:PropertyName})$0\r\n",
        "description": "(Client) Function: GetObjectPropertyValue(object,PropertyName)"
    },
    "Client.GetObjectCount": {
        "prefix": "GetObjectCount",
        "body": "GetObjectCount()$0\r\n",
        "description": "(Client) Function: GetObjectCount()"
    },
    "Client.GetObjectModelCount": {
        "prefix": "GetObjectModelCount",
        "body": "GetObjectModelCount()$0\r\n",
        "description": "(Client) Function: GetObjectModelCount()"
    },
    "Client.GetObjectModelGroup": {
        "prefix": "GetObjectModelGroup",
        "body": "GetObjectModelGroup(${1:model})$0\r\n",
        "description": "(Client) Function: GetObjectModelGroup(model)"
    },
    "Client.GetObjectModelName": {
        "prefix": "GetObjectModelName",
        "body": "GetObjectModelName(${1:model})$0\r\n",
        "description": "(Client) Function: GetObjectModelName(model)"
    },
    "Client.GetStreamedObjects": {
        "prefix": "GetStreamedObjects",
        "body": "GetStreamedObjects(${1:}, ${2:bGetAttached (optional)})$0\r\n",
        "description": "(Client) Function: GetStreamedObjects(,bGetAttached (optional))"
    },
    "Client.GetObjectModel": {
        "prefix": "GetObjectModel",
        "body": "GetObjectModel(${1:object})$0\r\n",
        "description": "(Client) Function: GetObjectModel(object)"
    },
    "Client.GetObjectLocation": {
        "prefix": "GetObjectLocation",
        "body": "GetObjectLocation(${1:object})$0\r\n",
        "description": "(Client) Function: GetObjectLocation(object)"
    },
    "Client.GetObjectRotation": {
        "prefix": "GetObjectRotation",
        "body": "GetObjectRotation(${1:object})$0\r\n",
        "description": "(Client) Function: GetObjectRotation(object)"
    },
    "Client.GetObjectScale": {
        "prefix": "GetObjectScale",
        "body": "GetObjectScale(${1:object})$0\r\n",
        "description": "(Client) Function: GetObjectScale(object)"
    },
    "Client.GetObjectBoundingBox": {
        "prefix": "GetObjectBoundingBox",
        "body": "GetObjectBoundingBox(${1:object})$0\r\n",
        "description": "(Client) Function: GetObjectBoundingBox(object)"
    },
    "Client.GetObjectSize": {
        "prefix": "GetObjectSize",
        "body": "GetObjectSize(${1:object})$0\r\n",
        "description": "(Client) Function: GetObjectSize(object)"
    },
    "Client.EnableObjectHitEvents": {
        "prefix": "EnableObjectHitEvents",
        "body": "EnableObjectHitEvents(${1:object }, ${2:bEnable (optional)})$0\r\n",
        "description": "(Client) Function: EnableObjectHitEvents(object ,bEnable (optional))"
    },
    "Client.GetObjectMass": {
        "prefix": "GetObjectMass",
        "body": "GetObjectMass(${1:object})$0\r\n",
        "description": "(Client) Function: GetObjectMass(object)"
    },
    "Client.GetObjectStaticMeshComponent": {
        "prefix": "GetObjectStaticMeshComponent",
        "body": "GetObjectStaticMeshComponent(${1:object})$0\r\n",
        "description": "(Client) Function: GetObjectStaticMeshComponent(object)"
    },
    "Client.SetObjectEditorSpeed": {
        "prefix": "SetObjectEditorSpeed",
        "body": "SetObjectEditorSpeed(${1:speed})$0\r\n",
        "description": "(Client) Function: SetObjectEditorSpeed(speed)"
    },
    "Client.SetObjectEditable": {
        "prefix": "SetObjectEditable",
        "body": "SetObjectEditable(${1:object}, ${2:EditMode})$0\r\n",
        "description": "(Client) Function: SetObjectEditable(object,EditMode)"
    },
    "Client.SetObjectOutline": {
        "prefix": "SetObjectOutline",
        "body": "SetObjectOutline(${1:object}, ${2:bEnable (optional)})$0\r\n",
        "description": "(Client) Function: SetObjectOutline(object,bEnable (optional))"
    },
    "Client.SetObjectCastShadow": {
        "prefix": "SetObjectCastShadow",
        "body": "SetObjectCastShadow(${1:object}, ${2:bEnable})$0\r\n",
        "description": "(Client) Function: SetObjectCastShadow(object,bEnable)"
    },
    "Client.SetObjectColor": {
        "prefix": "SetObjectColor",
        "body": "SetObjectColor(${1:object}, ${2:ColorHex }, ${3:MaterialSlot (optional)})$0\r\n",
        "description": "(Client) Function: SetObjectColor(object,ColorHex ,MaterialSlot (optional))"
    },
    "Client.SetObjectEmissiveColor": {
        "prefix": "SetObjectEmissiveColor",
        "body": "SetObjectEmissiveColor(${1:object}, ${2:ColorHex}, ${3:EmissiveStrength}, ${4:MaterialSlot (optional)})$0\r\n",
        "description": "(Client) Function: SetObjectEmissiveColor(object,ColorHex,EmissiveStrength,MaterialSlot (optional))"
    },
    "Client.SetObjectTexture": {
        "prefix": "SetObjectTexture",
        "body": "SetObjectTexture(${1:object}, ${2:TextureFile}, ${3:MaterialSlot (optional)})$0\r\n",
        "description": "(Client) Function: SetObjectTexture(object,TextureFile,MaterialSlot (optional))"
    },
    "Client.SetObjectAnimatedTexture": {
        "prefix": "SetObjectAnimatedTexture",
        "body": "SetObjectAnimatedTexture(${1:object}, ${2:TextureFile}, ${3:Rows}, ${4:Columns}, ${5:MaterialSlot (optional)})$0\r\n",
        "description": "(Client) Function: SetObjectAnimatedTexture(object,TextureFile,Rows,Columns,MaterialSlot (optional))"
    },


    "Client.AddEvent": {
        "prefix": "AddEvent",
        "body": "AddEvent(${1:EventName}, ${2:LuaFunction })$0\r\n",
        "description": "(Client) Function: AddEvent(EventName,LuaFunction )"
    },
    "Client.CallEvent": {
        "prefix": "CallEvent",
        "body": "CallEvent(${1:EventName }, ${2:UserArgs (optional)})$0\r\n",
        "description": "(Client) Function: CallEvent(EventName ,UserArgs (optional))"
    },
    "Client.AddRemoteEvent": {
        "prefix": "AddRemoteEvent",
        "body": "AddRemoteEvent(${1:RemoteEventName}, ${2:LuaFunction})$0\r\n",
        "description": "(Client) Function: AddRemoteEvent(RemoteEventName,LuaFunction)"
    },
    "Client.CallRemoteEvent": {
        "prefix": "CallRemoteEvent",
        "body": "CallRemoteEvent(${2:EventName}, ${3:UserArgs (optional)})$0\r\n",
        "description": "(Client) Function: CallRemoteEvent(player,EventName,UserArgs (optional))"
    },


    "Client.GetPickupActor": {
        "prefix": "GetPickupActor",
        "body": "GetPickupActor(${1:pickupid})$0\r\n",
        "description": "(Client) Function: GetPickupActor(pickupid)"
    },
    "Client.GetPickupStaticMeshComponent": {
        "prefix": "GetPickupStaticMeshComponent",
        "body": "GetPickupStaticMeshComponent(${1:pickupId})$0\r\n",
        "description": "(Client) Function: GetPickupStaticMeshComponent(pickupId)"
    },
    "Client.SetPickupPropertyValue": {
        "prefix": "SetPickupPropertyValue",
        "body": "SetPickupPropertyValue(${1:pickup}, ${2:PropertyName}, ${3:Value}, ${4:bSync (optional)})$0\r\n",
        "description": "(Client) Function: SetPickupPropertyValue(pickup,PropertyName,Value,bSync (optional))"
    },
    "Client.GetPickupPropertyValue": {
        "prefix": "GetPickupPropertyValue",
        "body": "GetPickupPropertyValue(${1:pickup}, ${2:PropertyName})$0\r\n",
        "description": "(Client) Function: GetPickupPropertyValue(pickup,PropertyName)"
    },
    "Client.GetPickupCount": {
        "prefix": "GetPickupCount",
        "body": "GetPickupCount()$0\r\n",
        "description": "(Client) Function: GetPickupCount()"
    },
    "Client.GetStreamedPickups": {
        "prefix": "GetStreamedPickups",
        "body": "GetStreamedPickups()$0\r\n",
        "description": "(Client) Function: GetStreamedPickups()"
    },
    "Client.GetPickupLocation": {
        "prefix": "GetPickupLocation",
        "body": "GetPickupLocation(${1:pickupid})$0\r\n",
        "description": "(Client) Function: GetPickupLocation(pickupid)"
    },

    
    "Client.GetDoorActor": {
        "prefix": "GetDoorActor",
        "body": "GetDoorActor(${1:doorid})$0\r\n",
        "description": "(Client) Function: GetDoorActor(doorid)"
    },
    "Client.IsValidDoor": {
        "prefix": "IsValidDoor",
        "body": "IsValidDoor(${1:door})$0\r\n",
        "description": "(Client) Function: IsValidDoor(door)"
    },
    "Client.GetDoorCount": {
        "prefix": "GetDoorCount",
        "body": "GetDoorCount()$0\r\n",
        "description": "(Client) Function: GetDoorCount()"
    },
    "Client.GetNearestDoor": {
        "prefix": "GetNearestDoor",
        "body": "GetNearestDoor(${1:x}, ${2:y}, ${3:z})$0\r\n",
        "description": "(Client) Function: GetNearestDoor(x,y,z)"
    },
    "Client.GetDoorLocation": {
        "prefix": "GetDoorLocation",
        "body": "GetDoorLocation(${1:door})$0\r\n",
        "description": "(Client) Function: GetDoorLocation(door)"
    },
    "Client.GetStreamedDoors": {
        "prefix": "GetStreamedDoors",
        "body": "GetStreamedDoors()$0\r\n",
        "description": "(Client) Function: GetStreamedDoors()"
    },
    "Client.SetDoorPropertyValue": {
        "prefix": "SetDoorPropertyValue",
        "body": "SetDoorPropertyValue(${1:door}, ${2:PropertyName}, ${3:Value}, ${4:bSync (optional)})$0\r\n",
        "description": "(Client) Function: SetDoorPropertyValue(door, PropertyName,Value,bSync (optional))"
    },
    "Client.GetDoorPropertyValue": {
        "prefix": "GetDoorPropertyValue",
        "body": "GetDoorPropertyValue(${1:door}, ${2:PropertyName})$0\r\n",
        "description": "(Client) Function: GetDoorPropertyValue(door, PropertyName)"
    },


    "Client.GetSoundCount": {
        "prefix": "GetSoundCount",
        "body": "GetSoundCount()$0\r\n",
        "description": "(Client) Function: GetSoundCount()"
    },
    "Client.IsValidSound": {
        "prefix": "IsValidSound",
        "body": "IsValidSound(${1:sound})$0\r\n",
        "description": "(Client) Function: IsValidSound(sound)"
    },
    "Client.CreateSound": {
        "prefix": "CreateSound",
        "body": "CreateSound(${1:SoundFile})$0\r\n",
        "description": "(Client) Function: CreateSound(SoundFile)"
    },
    "Client.CreateSound3D": {
        "prefix": "CreateSound3D",
        "body": "CreateSound3D(${1:SoundFile}, ${2:x}, ${3:y}, ${4:z}, ${5:radius})$0\r\n",
        "description": "(Client) Function: CreateSound3D(SoundFile,x,y,z,radius)"
    },
    "Client.SetSound3DLocation": {
        "prefix": "SetSound3DLocation",
        "body": "SetSound3DLocation(${1:sound}, ${2:x}, ${3:y}, ${4:z})$0\r\n",
        "description": "(Client) Function: SetSound3DLocation(sound,x,y,z)"
    },
    "Client.GetSound3DLocation": {
        "prefix": "GetSound3DLocation",
        "body": "GetSound3DLocation(${1:sound})$0\r\n",
        "description": "(Client) Function: GetSound3DLocation(sound)"
    },
    "Client.DestroySound": {
        "prefix": "DestroySound",
        "body": "DestroySound(${1:sound})$0\r\n",
        "description": "(Client) Function: DestroySound(sound)"
    },
    "Client.GetAllSounds": {
        "prefix": "GetAllSounds",
        "body": "GetAllSounds()$0\r\n",
        "description": "(Client) Function: GetAllSounds()"
    },
    "Client.SetSoundVolume": {
        "prefix": "SetSoundVolume",
        "body": "SetSoundVolume(${1:sound}, ${2:volume})$0\r\n",
        "description": "(Client) Function: SetSoundVolume(sound,volume)"
    },
    "Client.GetSoundVolume": {
        "prefix": "GetSoundVolume",
        "body": "GetSoundVolume(${1:sound})$0\r\n",
        "description": "(Client) Function: GetSoundVolume(sound)"
    },
    "Client.SetSoundPitch": {
        "prefix": "SetSoundPitch",
        "body": "SetSoundPitch(${1:sound}, ${2:Pitch})$0\r\n",
        "description": "(Client) Function: SetSoundPitch(sound,Pitch)"
    },
    "Client.GetSoundPitch": {
        "prefix": "GetSoundPitch",
        "body": "GetSoundPitch(${1:sound})$0\r\n",
        "description": "(Client) Function: GetSoundPitch(sound)"
    },
    "Client.SetSoundFadeIn": {
        "prefix": "SetSoundFadeIn",
        "body": "SetSoundFadeIn(${1:sound }, ${2:Duration}, ${3:VolumeLevel}, ${4:StartTime (optional)})$0\r\n",
        "description": "(Client) Function: SetSoundFadeIn(sound ,Duration,VolumeLevel,StartTime (optional))"
    },
    "Client.SetSoundFadeOut": {
        "prefix": "SetSoundFadeOut",
        "body": "SetSoundFadeOut(${1:sound}, ${2:Duration}, ${3:VolumeLevel})$0\r\n",
        "description": "(Client) Function: SetSoundFadeOut(sound,Duration,VolumeLevel)"
    },


    "Client.SetText3DPropertyValue": {
        "prefix": "SetText3DPropertyValue",
        "body": "SetText3DPropertyValue(${1:text3d}, ${2:PropertyName}, ${3:Value}, ${4:bSync (optional)})$0\r\n",
        "description": "(Client) Function: SetText3DPropertyValue(text3d,PropertyName,Value,bSync (optional))"
    },
    "Client.GetText3DPropertyValue": {
        "prefix": "GetText3DPropertyValue",
        "body": "GetText3DPropertyValue(${1:text3d}, ${2:PropertyName})$0\r\n",
        "description": "(Client) Function: GetText3DPropertyValue(text3d,PropertyName)"
    },
    "Client.GetText3DCount": {
        "prefix": "GetText3DCount",
        "body": "GetText3DCount()$0\r\n",
        "description": "(Client) Function: GetText3DCount()"
    },
    "Client.GetStreamedText3D": {
        "prefix": "GetStreamedText3D",
        "body": "GetStreamedText3D()$0\r\n",
        "description": "(Client) Function: GetStreamedText3D()"
    },
    "Client.GetText3DLocation": {
        "prefix": "GetText3DLocation",
        "body": "GetText3DLocation(${1:text3d})$0\r\n",
        "description": "(Client) Function: GetText3DLocation(text3d)"
    },


    "Client.Delay": {
        "prefix": "Delay",
        "body": "Delay(${1:Milliseconds}, ${2:LuaFunction}, ${3:UserArgs (optional) (optional)})$0\r\n",
        "description": "(Client) Function: Delay(Milliseconds,LuaFunction,UserArgs (optional) (optional))"
    },
    "Client.GetTimerCount": {
        "prefix": "GetTimerCount",
        "body": "GetTimerCount()$0\r\n",
        "description": "(Client) Function: GetTimerCount()"
    },
    "Client.GetAllTimers": {
        "prefix": "GetAllTimers",
        "body": "GetAllTimers()$0\r\n",
        "description": "(Client) Function: GetAllTimers()"
    },
    "Client.IsValidTimer": {
        "prefix": "IsValidTimer",
        "body": "IsValidTimer(${1:timer})$0\r\n",
        "description": "(Client) Function: IsValidTimer(timer)"
    },
    "Client.CreateTimer": {
        "prefix": "CreateTimer",
        "body": "CreateTimer(${1:LuaFunction}, ${2:Interval }, ${3:UserArgs (optional)})$0\r\n",
        "description": "(Client) Function: CreateTimer(LuaFunction,Interval ,UserArgs (optional))"
    },
    "Client.CreateCountTimer": {
        "prefix": "CreateCountTimer",
        "body": "CreateCountTimer(${1:LuaFunction}, ${2:Interval}, ${3:Count}, ${4:UserArgs (optional)})$0\r\n",
        "description": "(Client) Function: CreateCountTimer(LuaFunction,Interval,Count,UserArgs (optional))"
    },
    "Client.DestroyTimer": {
        "prefix": "DestroyTimer",
        "body": "DestroyTimer(${1:timer})$0\r\n",
        "description": "(Client) Function: DestroyTimer(timer)"
    },
    "Client.PauseTimer": {
        "prefix": "PauseTimer",
        "body": "PauseTimer(${1:timer})$0\r\n",
        "description": "(Client) Function: PauseTimer(timer)"
    },
    "Client.UnpauseTimer": {
        "prefix": "UnpauseTimer",
        "body": "UnpauseTimer(${1:timer})$0\r\n",
        "description": "(Client) Function: UnpauseTimer(timer)"
    },
    "Client.GetTimerRemainingTime": {
        "prefix": "GetTimerRemainingTime",
        "body": "GetTimerRemainingTime(${1:timer})$0\r\n",
        "description": "(Client) Function: GetTimerRemainingTime(timer)"
    },


    "Client.SetVehiclePropertyValue": {
        "prefix": "SetVehiclePropertyValue",
        "body": "SetVehiclePropertyValue(${1:vehicle}, ${2:PropertyName}, ${3:Value}, ${4:bSync (optional)})$0\r\n",
        "description": "(Client) Function: SetVehiclePropertyValue(vehicle,PropertyName,Value,bSync (optional))"
    },
    "Client.GetVehiclePropertyValue": {
        "prefix": "GetVehiclePropertyValue",
        "body": "GetVehiclePropertyValue(${1:vehicle}, ${2:PropertyName})$0\r\n",
        "description": "(Client) Function: GetVehiclePropertyValue(vehicle,PropertyName)"
    },
    "Client.GetVehicleCount": {
        "prefix": "GetVehicleCount",
        "body": "GetVehicleCount()$0\r\n",
        "description": "(Client) Function: GetVehicleCount()"
    },
    "Client.GetVehicleLicensePlate": {
        "prefix": "GetVehicleLicensePlate",
        "body": "GetVehicleLicensePlate(${1:vehicle})$0\r\n",
        "description": "(Client) Function: GetVehicleLicensePlate(vehicle)"
    },
    "Client.IsValidVehicle": {
        "prefix": "IsValidVehicle",
        "body": "IsValidVehicle(${1:vehicle})$0\r\n",
        "description": "(Client) Function: IsValidVehicle(vehicle)"
    },
    "Client.GetStreamedVehicles": {
        "prefix": "GetStreamedVehicles",
        "body": "GetStreamedVehicles()$0\r\n",
        "description": "(Client) Function: GetStreamedVehicles()"
    },
    "Client.GetVehicleBoneLocation": {
        "prefix": "GetVehicleBoneLocation",
        "body": "GetVehicleBoneLocation(${1:vehicle}, ${2:BoneName}, ${3:BoneSpace (optional)})$0\r\n",
        "description": "(Client) Function: GetVehicleBoneLocation(vehicle,BoneName,BoneSpace (optional))"
    },
    "Client.GetVehicleBoneNames": {
        "prefix": "GetVehicleBoneNames",
        "body": "GetVehicleBoneNames()$0\r\n",
        "description": "(Client) Function: GetVehicleBoneNames()"
    },
    "Client.GetVehicleModel": {
        "prefix": "GetVehicleModel",
        "body": "GetVehicleModel(${1:vehicle})$0\r\n",
        "description": "(Client) Function: GetVehicleModel(vehicle)"
    },
    "Client.GetVehicleLocation": {
        "prefix": "GetVehicleLocation",
        "body": "GetVehicleLocation(${1:vehicle})$0\r\n",
        "description": "(Client) Function: GetVehicleLocation(vehicle)"
    },
    "Client.GetVehicleRotation": {
        "prefix": "GetVehicleRotation",
        "body": "GetVehicleRotation(${1:vehicle})$0\r\n",
        "description": "(Client) Function: GetVehicleRotation(vehicle)"
    },
    "Client.GetVehicleVelocity": {
        "prefix": "GetVehicleVelocity",
        "body": "GetVehicleVelocity(${1:vehicle})$0\r\n",
        "description": "(Client) Function: GetVehicleVelocity(vehicle)"
    },
    "Client.GetVehicleForwardVector": {
        "prefix": "GetVehicleForwardVector",
        "body": "GetVehicleForwardVector(${1:vehicle})$0\r\n",
        "description": "(Client) Function: GetVehicleForwardVector(vehicle)"
    },
    "Client.GetVehicleRightVector": {
        "prefix": "GetVehicleRightVector",
        "body": "GetVehicleRightVector(${1:vehicle})$0\r\n",
        "description": "(Client) Function: GetVehicleRightVector(vehicle)"
    },
    "Client.GetVehicleUpVector": {
        "prefix": "GetVehicleUpVector",
        "body": "GetVehicleUpVector(${1:vehicle})$0\r\n",
        "description": "(Client) Function: GetVehicleUpVector(vehicle)"
    },
    "Client.GetVehicleBoundingBox": {
        "prefix": "GetVehicleBoundingBox",
        "body": "GetVehicleBoundingBox(${1:vehicle})$0\r\n",
        "description": "(Client) Function: GetVehicleBoundingBox(vehicle)"
    },
    "Client.GetVehicleEngineRPM": {
        "prefix": "GetVehicleEngineRPM",
        "body": "GetVehicleEngineRPM(${1:vehicle})$0\r\n",
        "description": "(Client) Function: GetVehicleEngineRPM(vehicle)"
    },
    "Client.GetVehicleForwardSpeed": {
        "prefix": "GetVehicleForwardSpeed",
        "body": "GetVehicleForwardSpeed(${1:vehicle})$0\r\n",
        "description": "(Client) Function: GetVehicleForwardSpeed(vehicle)"
    },
    "Client.GetVehicleGear": {
        "prefix": "GetVehicleGear",
        "body": "GetVehicleGear(${1:vehicle})$0\r\n",
        "description": "(Client) Function: GetVehicleGear(vehicle)"
    },
    "Client.GetVehicleWheelSurface": {
        "prefix": "GetVehicleWheelSurface",
        "body": "GetVehicleWheelSurface(${1:vehicle}, ${2:wheel})$0\r\n",
        "description": "(Client) Function: GetVehicleWheelSurface(vehicle,wheel)"
    },
    "Client.IsVehicleWheelInAir": {
        "prefix": "IsVehicleWheelInAir",
        "body": "IsVehicleWheelInAir(${1:vehicle}, ${2:wheel})$0\r\n",
        "description": "(Client) Function: IsVehicleWheelInAir(vehicle,wheel)"
    },
    "Client.IsVehicleInAir": {
        "prefix": "IsVehicleInAir",
        "body": "IsVehicleInAir(${1:vehicle})$0\r\n",
        "description": "(Client) Function: IsVehicleInAir(vehicle)"
    },
    "Client.GetVehicleWheelSteerAngle": {
        "prefix": "GetVehicleWheelSteerAngle",
        "body": "GetVehicleWheelSteerAngle(${1:vehicle}, ${2:wheel})$0\r\n",
        "description": "(Client) Function: GetVehicleWheelSteerAngle(vehicle,wheel)"
    },
    "Client.IsVehicleHornActive": {
        "prefix": "IsVehicleHornActive",
        "body": "IsVehicleHornActive(${1:vehicle})$0\r\n",
        "description": "(Client) Function: IsVehicleHornActive(vehicle)"
    },
    "Client.GetVehicleEngineState": {
        "prefix": "GetVehicleEngineState",
        "body": "GetVehicleEngineState(${1:vehicle})$0\r\n",
        "description": "(Client) Function: GetVehicleEngineState(vehicle)"
    },
    "Client.GetVehicleLightState": {
        "prefix": "GetVehicleLightState",
        "body": "GetVehicleLightState(${1:vehicle})$0\r\n",
        "description": "(Client) Function: GetVehicleLightState(vehicle)"
    },
    "Client.GetVehicleHoodRatio": {
        "prefix": "GetVehicleHoodRatio",
        "body": "GetVehicleHoodRatio(${1:vehicle})$0\r\n",
        "description": "(Client) Function: GetVehicleHoodRatio(vehicle)"
    },
    "Client.GetVehicleTrunkRatio": {
        "prefix": "GetVehicleTrunkRatio",
        "body": "GetVehicleTrunkRatio(${1:vehicle})$0\r\n",
        "description": "(Client) Function: GetVehicleTrunkRatio(vehicle)"
    },
    "Client.IsVehicleInWater": {
        "prefix": "IsVehicleInWater",
        "body": "IsVehicleInWater(${1:vehicle})$0\r\n",
        "description": "(Client) Function: IsVehicleInWater(vehicle)"
    },
    "Client.IsVehicleSeatOccupied": {
        "prefix": "IsVehicleSeatOccupied",
        "body": "IsVehicleSeatOccupied(${1:vehicle}, ${2:seat})$0\r\n",
        "description": "(Client) Function: IsVehicleSeatOccupied(vehicle,seat)"
    },
    "Client.GetVehicleDoorLocation": {
        "prefix": "GetVehicleDoorLocation",
        "body": "GetVehicleDoorLocation(${1:vehicle}, ${2:door})$0\r\n",
        "description": "(Client) Function: GetVehicleDoorLocation(vehicle,door)"
    },
    "Client.GetVehicleHealth": {
        "prefix": "GetVehicleHealth",
        "body": "GetVehicleHealth(${1:vehicle})$0\r\n",
        "description": "(Client) Function: GetVehicleHealth(vehicle)"
    },
    "Client.GetVehicleSkeletalMeshComponent": {
        "prefix": "GetVehicleSkeletalMeshComponent",
        "body": "GetVehicleSkeletalMeshComponent(${1:vehicle})$0\r\n",
        "description": "(Client) Function: GetVehicleSkeletalMeshComponent(vehicle)"
    },
    "Client.GetVehicleDriver": {
        "prefix": "GetVehicleDriver",
        "body": "GetVehicleDriver(${1:vehicle})\r\n",
        "description": "(Client) Function: GetVehicleDriver(vehicle)"
    },
    "Client.GetVehicleNumberOfSeats": {
        "prefix": "GetVehicleNumberOfSeats",
        "body": "GetVehicleNumberOfSeats(${1:vehicle})\r\n",
        "description": "(Client) Function: GetVehicleNumberOfSeats(vehicle)"
    },
    "Client.GetVehiclePassenger": {
        "prefix": "GetVehiclePassenger",
        "body": "GetVehiclePassenger(${1:vehicle})\r\n",
        "description": "(Client) Function: GetVehiclePassenger(vehicle)"
    },


    "Client.GetWebUICount": {
        "prefix": "GetWebUICount",
        "body": "GetWebUICount()$0\r\n",
        "description": "(Client) Function: GetWebUICount()"
    },
    "Client.CreateWebUI": {
        "prefix": "CreateWebUI",
        "body": "CreateWebUI(${1:x}, ${2:y}, ${3:width}, ${4:height }, ${5:zOrder (optional)}, ${6:frameRate (optional)})$0\r\n",
        "description": "(Client) Function: CreateWebUI(x,y,width,height ,zOrder (optional),frameRate (optional))"
    },
    "Client.CreateWebUI3D": {
        "prefix": "CreateWebUI3D",
        "body": "CreateWebUI3D(${1:x}, ${2:y}, ${3:z}, ${4:rx}, ${5:ry}, ${6:rz}, ${7:width}, ${8:height }, ${9:frameRate (optional)})$0\r\n",
        "description": "(Client) Function: CreateWebUI3D(x,y,z,rx,ry,rz,width,height ,frameRate (optional))"
    },
    "Client.CreateRemoteWebUI": {
        "prefix": "CreateRemoteWebUI",
        "body": "CreateRemoteWebUI()$0\r\n",
        "description": "(Client) Function: CreateRemoteWebUI()"
    },
    "Client.CreateRemoteWebUI3D": {
        "prefix": "CreateRemoteWebUI3D",
        "body": "CreateRemoteWebUI3D()$0\r\n",
        "description": "(Client) Function: CreateRemoteWebUI3D()"
    },
    "Client.DestroyWebUI": {
        "prefix": "DestroyWebUI",
        "body": "DestroyWebUI(${1:web})$0\r\n",
        "description": "(Client) Function: DestroyWebUI(web)"
    },
    "Client.GetAllWebUI": {
        "prefix": "GetAllWebUI",
        "body": "GetAllWebUI()$0\r\n",
        "description": "(Client) Function: GetAllWebUI()"
    },
    "Client.SetWebVisibility": {
        "prefix": "SetWebVisibility",
        "body": "SetWebVisibility(${1:web}, ${2:visibility})$0\r\n",
        "description": "(Client) Function: SetWebVisibility(web,visibility)"
    },
    "Client.GetWebVisibility": {
        "prefix": "GetWebVisibility",
        "body": "GetWebVisibility(${1:web})$0\r\n",
        "description": "(Client) Function: GetWebVisibility(web)"
    },
    "Client.SetWebURL": {
        "prefix": "SetWebURL",
        "body": "SetWebURL(${1:web}, ${2:URL})$0\r\n",
        "description": "(Client) Function: SetWebURL(web,URL)"
    },
    "Client.LoadWebFile": {
        "prefix": "LoadWebFile",
        "body": "LoadWebFile(${1:web}, ${2:File})$0\r\n",
        "description": "(Client) Function: LoadWebFile(web,File)"
    },
    "Client.ExecuteWebJS": {
        "prefix": "ExecuteWebJS",
        "body": "ExecuteWebJS(${1:web}, ${2:Javascript})$0\r\n",
        "description": "(Client) Function: ExecuteWebJS(web,Javascript)"
    },
    "Client.SetWebLocation": {
        "prefix": "SetWebLocation",
        "body": "SetWebLocation(${1:web}, ${2:x}, ${3:y }, ${4:z (optional)})$0\r\n",
        "description": "(Client) Function: SetWebLocation(web,x,y ,z (optional))"
    },
    "Client.SetWebRotation": {
        "prefix": "SetWebRotation",
        "body": "SetWebRotation(${1:web}, ${2:rx}, ${3:ry}, ${4:rz})$0\r\n",
        "description": "(Client) Function: SetWebRotation(web,rx,ry,rz)"
    },
    "Client.SetWebSize": {
        "prefix": "SetWebSize",
        "body": "SetWebSize(${1:web}, ${2:width}, ${3:height})$0\r\n",
        "description": "(Client) Function: SetWebSize(web,width,height)"
    },
    "Client.SetWebAlignment": {
        "prefix": "SetWebAlignment",
        "body": "SetWebAlignment(${1:web}, ${2:x}, ${3:y})$0\r\n",
        "description": "(Client) Function: SetWebAlignment(web,x,y)"
    },
    "Client.SetWebAnchors": {
        "prefix": "SetWebAnchors",
        "body": "SetWebAnchors(${1:web}, ${2:MinX}, ${3:MinY}, ${4:MaxX}, ${5:MaxY})$0\r\n",
        "description": "(Client) Function: SetWebAnchors(web,MinX,MinY,MaxX,MaxY)"
    },
    "Client.SetWebFocus": {
        "prefix": "SetWebFocus",
        "body": "SetWebFocus(${1:web})$0\r\n",
        "description": "(Client) Function: SetWebFocus(web)"
    },


    "Client.SetInputMode": {
        "prefix": "SetInputMode",
        "body": "SetInputMode(${1:InputMode})$0\r\n",
        "description": "(Client) Function: SetInputMode(InputMode)"
    },
    "Client.GetInputMode": {
        "prefix": "GetInputMode",
        "body": "GetInputMode()$0\r\n",
        "description": "(Client) Function: GetInputMode()"
    },
    "Client.IsInputKeyDown": {
        "prefix": "IsInputKeyDown",
        "body": "IsInputKeyDown(${1:key})$0\r\n",
        "description": "(Client) Function: IsInputKeyDown(key)"
    },
    "Client.IsCtrlPressed": {
        "prefix": "IsCtrlPressed",
        "body": "IsCtrlPressed()$0\r\n",
        "description": "(Client) Function: IsCtrlPressed()"
    },
    "Client.IsShiftPressed": {
        "prefix": "IsShiftPressed",
        "body": "IsShiftPressed()$0\r\n",
        "description": "(Client) Function: IsShiftPressed()"
    },
    "Client.IsAltPressed": {
        "prefix": "IsAltPressed",
        "body": "IsAltPressed()$0\r\n",
        "description": "(Client) Function: IsAltPressed()"
    },
    "Client.IsCmdPressed": {
        "prefix": "IsCmdPressed",
        "body": "IsCmdPressed()$0\r\n",
        "description": "(Client) Function: IsCmdPressed()"
    },
    "Client.SetIgnoreMoveInput": {
        "prefix": "SetIgnoreMoveInput",
        "body": "SetIgnoreMoveInput(${1:bIgnore})$0\r\n",
        "description": "(Client) Function: SetIgnoreMoveInput(bIgnore)"
    },
    "Client.SetIgnoreLookInput": {
        "prefix": "SetIgnoreLookInput",
        "body": "SetIgnoreLookInput(${1:bIgnore})$0\r\n",
        "description": "(Client) Function: SetIgnoreLookInput(bIgnore)"
    },
    "Client.SetControlRotation": {
        "prefix": "SetControlRotation",
        "body": "SetControlRotation(${1:pitch}, ${2:yaw}, ${3:roll})$0\r\n",
        "description": "(Client) Function: SetControlRotation(pitch,yaw,roll)"
    },
    "Client.GetInputAxisValue": {
        "prefix": "GetInputAxisValue",
        "body": "GetInputAxisValue(${1:AxisName})$0\r\n",
        "description": "(Client) Function: GetInputAxisValue(AxisName)"
    }
}
